version: 3
type: conversation
steps:
  - id: get_ecs_clusters
    type: action
    action:
      store: aws
      name: "ecs.ListClusters"
      parameters: {}
  - id: ecs_clusters
    type: jq
    jq: .get_ecs_clusters.clusterArns[] | split("/")[-1]
  - id: ecs_cluster
    type: input
    value_type: enum
    prompt: "Select the ECS cluster where your service is located at"
    possible_values: ${ecs_clusters}
  - id: get_ecs_services
    type: action
    action:
      store: aws
      name: ecs.ListServices
      parameters:
        cluster: ${ecs_cluster}
  - id: ecs_services
    type: jq
    jq: .get_ecs_services.serviceArns[] | split("/")[-1]
  - id: ecs_service
    type: input
    value_type: enum
    prompt: "Select the ECS service you want to scale"
    possible_values: ${ecs_services}
  - id: get_ecs_service
    type: action
    action:
      store: aws
      name: ecs.DescribeServices
      parameters:
        cluster: ${ecs_cluster}
        services: ["${ecs_service}"]
  - id: ecs_service_desired_count
    type: jq
    jq: .get_ecs_service.services[0].desiredCount
  - id: ecs_service_current_count
    type: jq
    jq: .get_ecs_service.services[0].runningCount
  - id: ecs_service_pending_count
    type: jq
    jq: .get_ecs_service.services[0].pendingCount
  - id: ecs_service_status
    type: jq
    jq: .get_ecs_service.services[0].status
  - id: ecs_service_scaling_status
    type: message
    prompt: |
      *Current status of service:*
      *Desired count:* ${ecs_service_desired_count}
      *Current count:* ${ecs_service_current_count}
      *Pending count:* ${ecs_service_pending_count}
      *Status:* ${ecs_service_status}
  - id: ecs_service_scale
    type: input
    value_type: enum
    prompt: "Select the number of instances you want to scale to"
    possible_values:
      - "1"
      - "2"
      - "3"
      - "4"
      - "5"
      - "6"
      - "7"
      - "8"
      - "9"
      - "10"
  - id: scale_service
    type: action
    action:
      store: aws
      name: ecs.UpdateService
      parameters:
        cluster: ${ecs_cluster}
        service: ${ecs_service}
        desiredCount: ${ecs_service_scale}
  - id: success
    type: message
    prompt: |
      âœ… *Done!*
      Scaled ECS service: *${ecs_service}* in cluster *${ecs_cluster}* to *${ecs_service_scale}* instances succesfully!
